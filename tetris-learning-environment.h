#ifndef TETRIS_LEARNING_ENVIRONMENT
#define TETRIS_LEARNING_ENVIRONMENT

/* Warning, this file was autogenerated by cbindgen, any modifications will be overwritten. */

#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>

typedef enum {
    Up = 0,
    Down = 1,
    Left = 2,
    Right = 3,
    B = 4,
    A = 5,
    Select = 6,
    Start = 7,
} Key;

typedef struct Environment Environment;

/*
 * Free the resources used by the environment.
 *
 * When this is called, the memory allocated to hold the environment is freed, and
 * any pointers to the pixel data handed out by get_pixels become invalid.
 */
void destroy_environment(Environment *env_ptr);

void free_rgb_pixel_array(uint8_t *buffer);

/*
 * Get the number of lines cleared during the current game
 */
int32_t get_lines(const Environment *env_ptr);

/*
 * Returns a pointer to the beginning of the frame buffer of the emulator, which holds the contents of the screen.
 *
 * The array holds WIDTH * HEIGHT pixels, where each pixel is a 32-bit RGBA integer.
 *
 * The buffer referenced by the returned pointer is invalidated after the next time run_frame is called.
 */
const uint32_t *get_pixels(Environment *env_ptr);

/*
 * Returns a pointer to an array holding WIDTH * LENGTH rgb pixels (each component is 8-bits)
 * the length of the array is WIDTH * LENGTH * 3 bytes
 * the array returned by this function must be freed by the free_rgb_pixel_array function
 */
uint8_t *get_rgb_pixels(Environment *env_ptr);

/*
 * Get the score from a game of tetris that just ended.
 * The score is stored as a 3-byte little endian bcd at address 0xC0A0
 */
int32_t get_score(const Environment *env_ptr);

/*
 * Initialize the emulation environment.
 *
 * ARGS:
 * rom_path_ptr: the path to the Tetris rom, must be a valid UTF-8 string.
 *
 * Returns:
 * A pointer to the environment struct, or null if there was an error.
 */
Environment *initialize_environment(const char *rom_path_ptr);

/*
 * Whether or not the game is currently still in progress, if false then the game has ended
 */
bool is_running(const Environment *env_ptr);

/*
 * Run a single frame of the game
 */
void run_frame(Environment *env_ptr);

void set_key_state(Environment *env_ptr, Key key, bool pressed);

/*
 * Start a new game of Tetris.
 *
 * This loads the game start state, and re-seeds the prng.
 */
int32_t start_episode(Environment *env_ptr);

#endif /* TETRIS_LEARNING_ENVIRONMENT */
